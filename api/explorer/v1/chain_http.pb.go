// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: explorer/v1/chain.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChainGetBalance = "/api.explorer.v1.Chain/GetBalance"
const OperationChainGetBlockByHash = "/api.explorer.v1.Chain/GetBlockByHash"
const OperationChainGetBlockByNumber = "/api.explorer.v1.Chain/GetBlockByNumber"
const OperationChainGetBlockNumer = "/api.explorer.v1.Chain/GetBlockNumer"
const OperationChainGetNetworkId = "/api.explorer.v1.Chain/GetNetworkId"
const OperationChainGetTransaction = "/api.explorer.v1.Chain/GetTransaction"
const OperationChainGetTransactionReceipt = "/api.explorer.v1.Chain/GetTransactionReceipt"

type ChainHTTPServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*GetBlockReply, error)
	GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*GetBlockReply, error)
	GetBlockNumer(context.Context, *emptypb.Empty) (*GetBlockNumerReply, error)
	GetNetworkId(context.Context, *emptypb.Empty) (*GetNetworkIdReply, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error)
	GetTransactionReceipt(context.Context, *GetTransactionReceiptRequest) (*GetTransactionReceiptReply, error)
}

func RegisterChainHTTPServer(s *http.Server, srv ChainHTTPServer) {
	r := s.Route("/")
	r.GET("/chain/v1/get_block_number", _Chain_GetBlockNumer0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_network_id", _Chain_GetNetworkId0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_balance/{address}", _Chain_GetBalance0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_transaction/{transaction_hash}", _Chain_GetTransaction0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_transaction_receipt/{transaction_hash}", _Chain_GetTransactionReceipt0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_block_by_number/{block_number}", _Chain_GetBlockByNumber0_HTTP_Handler(srv))
	r.GET("/chain/v1/get_block_by_hash/{block_hash}", _Chain_GetBlockByHash0_HTTP_Handler(srv))
}

func _Chain_GetBlockNumer0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetBlockNumer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockNumer(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlockNumerReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetNetworkId0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetNetworkId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNetworkId(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNetworkIdReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetBalance0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBalance(ctx, req.(*GetBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBalanceReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetTransaction0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransaction(ctx, req.(*GetTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetTransactionReceipt0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionReceiptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetTransactionReceipt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactionReceipt(ctx, req.(*GetTransactionReceiptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionReceiptReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetBlockByNumber0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlockByNumberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetBlockByNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockByNumber(ctx, req.(*GetBlockByNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlockReply)
		return ctx.Result(200, reply)
	}
}

func _Chain_GetBlockByHash0_HTTP_Handler(srv ChainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlockByHashRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChainGetBlockByHash)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlockReply)
		return ctx.Result(200, reply)
	}
}

type ChainHTTPClient interface {
	GetBalance(ctx context.Context, req *GetBalanceRequest, opts ...http.CallOption) (rsp *GetBalanceReply, err error)
	GetBlockByHash(ctx context.Context, req *GetBlockByHashRequest, opts ...http.CallOption) (rsp *GetBlockReply, err error)
	GetBlockByNumber(ctx context.Context, req *GetBlockByNumberRequest, opts ...http.CallOption) (rsp *GetBlockReply, err error)
	GetBlockNumer(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetBlockNumerReply, err error)
	GetNetworkId(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetNetworkIdReply, err error)
	GetTransaction(ctx context.Context, req *GetTransactionRequest, opts ...http.CallOption) (rsp *GetTransactionReply, err error)
	GetTransactionReceipt(ctx context.Context, req *GetTransactionReceiptRequest, opts ...http.CallOption) (rsp *GetTransactionReceiptReply, err error)
}

type ChainHTTPClientImpl struct {
	cc *http.Client
}

func NewChainHTTPClient(client *http.Client) ChainHTTPClient {
	return &ChainHTTPClientImpl{client}
}

func (c *ChainHTTPClientImpl) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...http.CallOption) (*GetBalanceReply, error) {
	var out GetBalanceReply
	pattern := "/chain/v1/get_balance/{address}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...http.CallOption) (*GetBlockReply, error) {
	var out GetBlockReply
	pattern := "/chain/v1/get_block_by_hash/{block_hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetBlockByHash))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...http.CallOption) (*GetBlockReply, error) {
	var out GetBlockReply
	pattern := "/chain/v1/get_block_by_number/{block_number}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetBlockByNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetBlockNumer(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetBlockNumerReply, error) {
	var out GetBlockNumerReply
	pattern := "/chain/v1/get_block_number"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetBlockNumer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetNetworkId(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetNetworkIdReply, error) {
	var out GetNetworkIdReply
	pattern := "/chain/v1/get_network_id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetNetworkId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...http.CallOption) (*GetTransactionReply, error) {
	var out GetTransactionReply
	pattern := "/chain/v1/get_transaction/{transaction_hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChainHTTPClientImpl) GetTransactionReceipt(ctx context.Context, in *GetTransactionReceiptRequest, opts ...http.CallOption) (*GetTransactionReceiptReply, error) {
	var out GetTransactionReceiptReply
	pattern := "/chain/v1/get_transaction_receipt/{transaction_hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChainGetTransactionReceipt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
